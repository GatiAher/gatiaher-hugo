<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Olin College: SP2021 Software Systems in C on Gati Aher</title>
    <link>http://GatiAher.github.io/tags/olin-college-sp2021-software-systems-in-c/</link>
    <description>Recent content in Olin College: SP2021 Software Systems in C on Gati Aher</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 08 May 2021 09:35:51 -0400</lastBuildDate><atom:link href="http://GatiAher.github.io/tags/olin-college-sp2021-software-systems-in-c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Implementing Fast and Space-Efficient Look-up and Search</title>
      <link>http://GatiAher.github.io/projects/implementing-fast-and-space-efficient-look-up-and-search/</link>
      <pubDate>Sat, 08 May 2021 09:35:51 -0400</pubDate>
      
      <guid>http://GatiAher.github.io/projects/implementing-fast-and-space-efficient-look-up-and-search/</guid>
      <description>&lt;p&gt;The Bloom filter data structure tracks set-membership in a fast and space-efficient way. I first heard about Bloom filters when I saw them used in speeding up database search. Then, I heard about Microsoft using a stack of Bloom filters to &lt;a href=&#34;https://dl.acm.org/doi/10.1145/3077136.3080789&#34;&gt;speed up the Bing search engine&amp;rsquo;s keyword search&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this project, I implemented a Bloom filter and a bit-sliced document signature in C. I also wrote unit tests and a collection of fun demos to show how Bloom filters and bit-sliced signatures can be used. This report gives an overview of the project, demos and results, and notable code design decisions.&lt;/p&gt;
&lt;p&gt;&lt;ul class=&#34;actions&#34;&gt;
    
    
    
        
        &lt;li&gt;&lt;a href=&#34;https://github.com/GatiAher/BloomForSearchFromScratch&#34; class=&#34;button icon solid brands fa-github&#34;&gt;Visit GitHub&lt;/a&gt;&lt;/li&gt;
    
&lt;/ul&gt;
&lt;ul class=&#34;actions&#34;&gt;
    
    
    
        
        &lt;li&gt;&lt;a href=&#34;https://trello.com/b/xzVRxTDJ/bloomforsearchfromscratch&#34; class=&#34;button icon solid brands fa-trello&#34;&gt;Visit Trello&lt;/a&gt;&lt;/li&gt;
    
&lt;/ul&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GarbageEater: Simple Virtual Machine</title>
      <link>http://GatiAher.github.io/projects/build-a-virtual-machine/</link>
      <pubDate>Wed, 07 Apr 2021 22:05:00 -0500</pubDate>
      
      <guid>http://GatiAher.github.io/projects/build-a-virtual-machine/</guid>
      <description>&lt;p&gt;Little Computer 3 (LC-3) is a reduced instruction set computer (RISC). This means that its architecture uses a limited set of optimized instructions to complete tasks. We implemented a virtual machine (VM) in C that can run compiled LC-3 assembly. Given program code in a compiled OBJ file, the VM can execute the instructions in the file.&lt;/p&gt;
&lt;p&gt;In order to do this, it uses the memory structure defined in the LC-3 specification, including program memory, program registers, and condition flags. It reads and writes to these memory structures and manages I/O through the terminal. Our VM successfully plays game files!&lt;/p&gt;
&lt;p&gt;&lt;ul class=&#34;actions&#34;&gt;
    
    
    
        
        &lt;li&gt;&lt;a href=&#34;https://github.com/GatiAher/SoftSysGarbageEaters/blob/main/reports/report.md&#34; class=&#34;button icon solid brands fa-github&#34;&gt;Visit GitHub&lt;/a&gt;&lt;/li&gt;
    
&lt;/ul&gt;
&lt;ul class=&#34;actions&#34;&gt;
    
    
    
        
        &lt;li&gt;&lt;a href=&#34;https://trello.com/b/s83l2eWJ/softsys-garbagecollectors&#34; class=&#34;button icon solid brands fa-trello&#34;&gt;Visit Trello&lt;/a&gt;&lt;/li&gt;
    
&lt;/ul&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
