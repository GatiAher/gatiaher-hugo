<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Olin College: FA2021 Discrete Mathematics on Gati Aher&#39;s Blog</title>
    <link>http://GatiAher.github.io/tags/olin-college-fa2021-discrete-mathematics/</link>
    <description>Recent content in Olin College: FA2021 Discrete Mathematics on Gati Aher&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 18 Dec 2021 23:23:16 -0500</lastBuildDate><atom:link href="http://GatiAher.github.io/tags/olin-college-fa2021-discrete-mathematics/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Procedural Graph Generation For More Realistic Simulations</title>
      <link>http://GatiAher.github.io/projects/procedural-graph-generation-for-more-realistic-simulations/</link>
      <pubDate>Sat, 18 Dec 2021 23:23:16 -0500</pubDate>
      
      <guid>http://GatiAher.github.io/projects/procedural-graph-generation-for-more-realistic-simulations/</guid>
      <description>&lt;p&gt;Many real world systems can be modeled with graphs. Most stable and complex graphs have &lt;strong&gt;small-world&lt;/strong&gt; (local clustering) and &lt;strong&gt;scale-free&lt;/strong&gt; (hubs) properties. In this project, we (1) identified algorithms that generated small-world and scale-free graphs, (2) studied and implemented generation functions for each type of algorithm, (3) created custom animations of graph generation process, and (4) verified that our graphs exhibited the expected structural properties.&lt;/p&gt;
&lt;ul class=&#34;actions&#34;&gt;
    
    
    
        
        &lt;li&gt;&lt;a href=&#34;https://github.com/GatiAher/network-generation&#34; class=&#34;button icon solid brands fa-github&#34;&gt;Visit GitHub&lt;/a&gt;&lt;/li&gt;
    
&lt;/ul&gt;


&lt;div id=&#34;Container&#34;
 style=&#34;padding-bottom:56.25%; position:relative; display:block; width: 100%&#34;&gt;
 &lt;iframe id=&#34;googleSlideIframe&#34;
  width=&#34;100%&#34; height=&#34;100%&#34;
  src=&#34;https://docs.google.com/presentation/d/e/2PACX-1vRoVNJKtW84R-zlSBe9CBJO1PGcZwgc7_wVDoCUYklCmjqXsDLeqK1ipSAd0XweKgvaql3kSxRcF7YA/embed?start=false&amp;amp;loop=false&amp;amp;delayms=3000&#34;
  frameborder=&#34;0&#34; allowfullscreen=&#34;&#34;
  style=&#34;position:absolute; top:0; left: 0&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Deep Dive Into Huffman Coding</title>
      <link>http://GatiAher.github.io/projects/deep-dive-into-huffman-coding/</link>
      <pubDate>Mon, 25 Oct 2021 00:46:56 -0500</pubDate>
      
      <guid>http://GatiAher.github.io/projects/deep-dive-into-huffman-coding/</guid>
      <description>&lt;p&gt;Huffman coding is a variation on prefix codes that optimize lossless data compression. In this deep dive, we (1) introduced how Huffman Codes work, (2) explored the theoretical limits of Huffman compression, (3) analyzed resilience to error, and (4) followed the evolution of research on using choice of Huffman tables to encode secret messages in MP3 files.&lt;/p&gt;
&lt;div id=&#34;Container&#34;
  style=&#34;padding-bottom:56.25%; position:relative; display:block; width: 100%&#34;&gt;
  &lt;iframe id=&#34;googlePdfIframe&#34;
  width=&#34;100%&#34; height=&#34;100%&#34;
  src=&#34;https://drive.google.com/file/d/1qZT_iiq8OeSeb5d5wkv4Jp9Ie-83-cm0/preview&#34;
  frameborder=&#34;0&#34; allowfullscreen=&#34;&#34;
  style=&#34;position:absolute; top:0; left: 0&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>
